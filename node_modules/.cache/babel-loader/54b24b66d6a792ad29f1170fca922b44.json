{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useOnClickOutside = (ref, handler) => {\n  _s();\n\n  React.useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n    };\n  }, [ref, handler]);\n};\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nconst useWindowSize = () => {\n  _s2();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s2(useWindowSize, \"Lx6dFCJt7Ze4WyzsCH5RzM+GN9Y=\");\n\nexport { useOnClickOutside, useWindowSize };","map":{"version":3,"sources":["/Users/animblrlap188/Downloads/frontend/assignment/src/components/hooks.js"],"names":["useState","useEffect","useOnClickOutside","ref","handler","React","listener","event","current","contains","target","document","addEventListener","removeEventListener","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAAA;;AACxCC,EAAAA,KAAK,CAACJ,SAAN,CAAgB,MAAM;AAClB,UAAMK,QAAQ,GAAGC,KAAK,IAAI;AACtB,UAAI,CAACJ,GAAG,CAACK,OAAL,IAAgBL,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACpD;AACH;;AACDN,MAAAA,OAAO,CAACG,KAAD,CAAP;AACH,KALD;;AAMAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AAEA,WAAO,MAAM;AACTK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACH,KAFD;AAGH,GAZD,EAaI,CAACH,GAAD,EAAMC,OAAN,CAbJ;AAeH,CAhBD;;GAAMF,iB;;AAkBN,MAAMY,aAAa,GAAG,MAAM;AAAA;;AACxB;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC;AACzCiB,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAA5C;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,aAASmB,YAAT,GAAwB;AACpB;AACAJ,MAAAA,aAAa,CAAC;AACVC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADJ;AAEVH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAFL,OAAD,CAAb;AAIH,KARW,CASZ;;;AACAF,IAAAA,MAAM,CAACT,gBAAP,CAAwB,QAAxB,EAAkCQ,YAAlC,EAVY,CAWZ;;AACAA,IAAAA,YAAY,GAZA,CAaZ;;AACA,WAAO,MAAMC,MAAM,CAACR,mBAAP,CAA2B,QAA3B,EAAqCO,YAArC,CAAb;AACH,GAfQ,EAeN,EAfM,CAAT,CAPwB,CAsBhB;;AACR,SAAOL,UAAP;AACH,CAxBD;;IAAMD,a;;AA0BN,SACIZ,iBADJ,EAEIY,aAFJ","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useOnClickOutside = (ref, handler) => {\n    React.useEffect(() => {\n        const listener = event => {\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n            handler(event);\n        };\n        document.addEventListener('mousedown', listener);\n\n        return () => {\n            document.removeEventListener('mousedown', listener);\n        };\n    },\n        [ref, handler],\n    );\n};\n\nconst useWindowSize = () => {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}\n\nexport {\n    useOnClickOutside,\n    useWindowSize\n};"]},"metadata":{},"sourceType":"module"}